/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.7.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

// normal depth
depth 0.50;
ndepth 16;
// square block dimension
width #calc "$depth*3.0";

xn1  #calc "$depth*2.00";
xn2  #calc "$xn1+1.0*$depth";
xn3  #calc "$depth*4.50";
xn4  #calc "$depth*8.75";

yn1  #calc "$depth*(4.0+1.50)";
yn2  #calc "$depth*(5.0+1.50)";
yn3  #calc "$depth*(9.0+1.50)";
yn4  #calc "$depth*(1.50)";
yn5  #calc "$depth*(9.0+1.50+1.50)";

zn  #calc "$depth*5.125";

// alternatively, use value assignment for uneven grid
hrf 2;
// NX1  #calc "$xn1/$depth*$ndepth/$hrf";
NX1 16;
// NX2  #calc "($xn2-$xn1)/$depth*$ndepth/$hrf";
NX2 8;
// NX3  #calc "($xn3-$xn2)/$depth*$ndepth/$hrf";
NX3 12;
NXEXT #calc "($NX1+$NX2+$NX3)";

// NY1  #calc "$yn1/$depth*$ndepth/$hrf";
NY1 32;
// NY2  #calc "($yn2-$yn1)/$depth*$ndepth/$hrf";
NY2 8;
// NY3  #calc "($yn3-$yn2)/$depth*$ndepth/$hrf";
NY3 32;
NYEXT #calc "($NY1+$NY2+$NY3)";

// NZ #calc "2.5*$ndepth";

// NX1 #calc "$xn3/$depth*$ndepth/$hrf";
// NY1 #calc "$yn3/$depth*$ndepth/$hrf";

// NX1 96;
// NX2 24;
// NX3 36;

// NY1 24;
// NY2 24;
// NY3 24;

// NZ  #calc "$zn/$depth*$ndepth";
NZ 82;
// NZ 1.0;

//Cell expansion ratios
// original CERs
// xe_front 0.08428845675;
// ye_bottom 0.04583554871;
// ye_top 21.81870025;
// xe_back 13.45427455; 

// xe_front 0.02761;
// ye_bottom 0.02832;
// ye_top 3.555;
// xe_back 3.505; 

xe_front 1;
ye_bottom 1;
ye_top 1;
xe_back 1; 

vertices
(
    //Foward vertices (0-7)
    (0 $yn4 0) // 0
    ($xn1 $yn4 0) // 1
    (0 $yn1 0) // 2
    ($xn1 $yn1 0) // 3
    (0 $yn2 0) // 4
    ($xn1 $yn2 0) // 5
    (0 $yn3 0) // 6
    ($xn1 $yn3 0) // 7

    //Rear vertices (8-15)
    ($xn2 $yn4 0) // 8
    ($xn3 $yn4 0) // 9
    ($xn2 $yn1 0) // 10
    ($xn3 $yn1 0) // 11
    ($xn2 $yn2 0) // 12
    ($xn3 $yn2 0) // 13
    ($xn2 $yn3 0) // 14
    ($xn3 $yn3 0) // 15

    //Z+ Foward vertices (16-23)
    (0 $yn4 $zn) // 16
    ($xn1 $yn4 $zn) // 17
    (0 $yn1 $zn) // 18
    ($xn1 $yn1 $zn) // 19
    (0 $yn2 $zn) // 20
    ($xn1 $yn2 $zn) // 21
    (0 $yn3 $zn) // 22
    ($xn1 $yn3 $zn) //23

    //Z+ Rear vertices (24-31)
    ($xn2 $yn4 $zn) // 24
    ($xn3 $yn4 $zn) // 25
    ($xn2 $yn1 $zn) // 26
    ($xn3 $yn1 $zn) // 27
    ($xn2 $yn2 $zn) // 28
    ($xn3 $yn2 $zn) // 29
    ($xn2 $yn3 $zn) // 30
    ($xn3 $yn3 $zn) // 31

    // extended regions (32-47)
    //z0 plane
    (0 0 0) // 32
    ($xn3 0 0) // 33
    ($xn4 0 0) // 34
    ($xn4 $yn4 0) // 35
    ($xn4 $yn3 0) // 36
    ($xn4 $yn5 0) // 37
    ($xn3 $yn5 0) // 38
    (0 $yn5 0) // 39

    //z1 plane
    (0 0 $zn) // 40
    ($xn3 0 $zn) // 41
    ($xn4 0 $zn) // 42
    ($xn4 $yn4 $zn) // 43
    ($xn4 $yn3 $zn) // 44
    ($xn4 $yn5 $zn) // 45
    ($xn3 $yn5 $zn) // 46
    (0 $yn5 $zn) // 47
    ($xn4 $yn1 0) // 48
    ($xn4 $yn2 0) // 49
    ($xn4 $yn1 $zn) // 50
    ($xn4 $yn2 $zn) // 51
);

blocks
(
    //Forward blocks
    hex (0 1 3 2 16 17 19 18) ($NX1 $NY1 $NZ) simpleGrading ($xe_front $ye_bottom 1) // hex block 1
    hex (2 3 5 4 18 19 21 20) ($NX1 $NY2 $NZ) simpleGrading ($xe_front 1 1) // hex block 2
    hex (4 5 7 6 20 21 23 22) ($NX1 $NY3 $NZ) simpleGrading ($xe_front $ye_top 1) // hex block 3
    //Middle block
    hex (1 8 10 3 17 24 26 19) ($NX2 $NY1 $NZ) simpleGrading (1 $ye_bottom 1) // hex block 4
    hex (5 12 14 7 21 28 30 23) ($NX2 $NY3 $NZ) simpleGrading (1 $ye_top 1) // hex block 5
    //Rear blocks
    hex (8 9 11 10 24 25 27 26) ($NX3 $NY1 $NZ) simpleGrading ($xe_back $ye_bottom 1) // hex block 6
    hex (10 11 13 12 26 27 29 28) ($NX3 $NY2 $NZ) simpleGrading ($xe_back 1 1) // hex block 7
    hex (12 13 15 14 28 29 31 30) ($NX3 $NY3 $NZ) simpleGrading ($xe_back $ye_top 1) // hex block 8
    //Extended blocks
    hex (32 33 9 0 40 41 25 16) (36 4 $NZ) simpleGrading ($xe_back $ye_top 1) // hex block 9
    hex (33 34 35 9 41 42 43 25) (10 4 $NZ) simpleGrading ($xe_back $ye_top 1) // hex block 10
    hex (6 15 38 39 22 31 46 47) (36 4 $NZ) simpleGrading ($xe_back $ye_top 1) // hex block 11
    hex (15 36 37 38 31 44 45 46) (10 4 $NZ) simpleGrading ($xe_back $ye_top 1) // hex block 12
    // split the hex to take care of periodic BC
    // hex (9 35 36 15 25 43 44 31) (10 $NYEXT $NZ) simpleGrading ($xe_back $ye_top 1) // hex block 12
    hex (9 35 48 11 25 43 50 27) (10 $NY1 $NZ) simpleGrading ($xe_back $ye_top 1) // hex block 12
    hex (11 48 49 13 27 50 51 29) (10 $NY2 $NZ) simpleGrading ($xe_back $ye_top 1) // hex block 13
    hex (13 49 36 15 29 51 44 31) (10 $NY3 $NZ) simpleGrading ($xe_back $ye_top 1) // hex block 14
);

edges
(
);

boundary
(
    front
    {
        // type cyclic;
	    // neighbourPatch back;
        // type patch;
        type wall;
        faces
        (
            (32 33 41 40)
            (33 34 42 41)
        );
    }
    
    back
    {
        // type cyclic;
	    // neighbourPatch front;
        // type patch;
        type wall;
        faces
        (
            (39 38 46 47)
            (38 37 45 46)
        );
    }

    blockFaces
    {
        type wall;
        faces
        (
            (3 5 21 19)
            (5 12 28 21)
            (10 12 28 26)
            (3 10 26 19)
        );
    }
    
    inlet
    {
        type   cyclic;
        neighbourPatch outlet;
        faces
        (
            (0 32 40 16)
            (0 2 18 16)
            (2 4 20 18)
            (4 6 22 20)
            (6 22 47 39)
        );
    }

    outlet
    {
	
        type   cyclic;
        neighbourPatch  inlet;
        faces
        (
            (34 42 43 35)
            (35 48 50 43)
            (48 49 51 50)
            (49 36 44 51)
            (36 44 45 37)
            // (35 43 44 36)
        );
	
    }

    bottom
    {
        type wall;
        faces
        (
    		//Forward blocks
    		(0 1 3 2) 
    		(2 3 5 4) 
    		(4 5 7 6) 
    		//Middle block
    		(1 8 10 3) 
    		(5 12 14 7) 
    		//Rear blocks
    		(8 9 11 10) 
   		    (10 11 13 12) 
    		(12 13 15 14) 

            (32 33 9 0)
            (6 15 38 39)
            (33 34 35 9)
            // (9 35 36 15)
            (9 35 48 11)
            (11 48 49 13)
            (13 49 36 15)
            (15 36 37 38)
        );
	
    }

    top
    {
        type wall;
        faces
        (
    		//Forward blocks
    		(16 17 19 18) 
    		(18 19 21 20) 
    		(20 21 23 22) 
    		//Middle block
    		(17 24 26 19) 
    		(21 28 30 23) 
    		//Rear blocks
    		(24 25 27 26) 
   		    (26 27 29 28) 
    		(28 29 31 30) 

            (40 41 25 16)
            (41 42 43 25)
            // (25 43 44 31)
            (25 43 50 27)
            (27 50 51 29)
            (29 51 44 31)
            (31 44 45 46)
            (22 31 46 47)
        );
	
    }
);

mergePatchPairs
(
);

// ************************************************************************* //